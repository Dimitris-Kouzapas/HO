----------------------- REVIEW 1 ---------------------
PAPER: 30
TITLE: On the Relative Expressiveness of Higher-Order Session Processes
AUTHORS: Dimitrios Kouzapas, Jorge A. Pérez and Nobuko Yoshida

OVERALL EVALUATION: 1 (accept)
REVIEWER'S CONFIDENCE: 4 (high)

----------- REVIEW -----------
This paper presents fully abstract and type-preserving encodings among
a variety of higher-order pi-calculi (where lambda-abstracted
processes can be sent and received) with session types.  The variants
are with or without recursion and first-order name passing, polyadic
communication, and more than 2nd-order lambda-abstractions.  The
technical results are plausible (though unsurprising) and seem solid
(though I have not checked all the appendices or proofs).  I only have
a few reservations about the presentation (marked [*] or [**] in the
detailed comments below), hence my evaluation above.

Abstract, "contextual congruence": do you mean "barbed congruence"?

p. 2, middle, "up", "down", and "quit": use "\mathit{up}" etc. in
LaTeX to avoid extra space between letters (otherwise LaTeX formats
"up" as u times p).

It may help to explain _who_ (client or server) makes the choice in &
(and \otimes).

A period is missing after "(cf. {\S}5.2)".

p. 3, "see Fig. 1": it is hard to understand this figure at this point
since you have not yet explained what the "+" and "~" mean.

p. 4, the paragraph about recursion is too abstract and does not make
much sense at this point.

[*] I do not quite understand your argument for type preservation (for
the record, I am _not_ the same reviewer).  It is natural in general
that when an expression of some language is encoded into a different
language, the type of the expression is also _encoded_ rather than
just _preserved_.  (Consider, for instance, a typed CPS translation of
lambda-terms.)

p. 6, "its main property" -> "its main property." (missing period)

"We use the coinductive definition of duality of [3]": it was hard
until reading "Def. 21 in the Appendix" to understand that you use
coinduction for the "fixed point construction".

p. 7, "Rule (EProm) allows us to freely use a linear type variable as
shared": do you mean the converse?  For instance, a typing rule like

  x:real |- P
  -----------
  x:int |- P

would allow P to use an _int_ as a _real_, not the other way around.

[*] p. 12, Definition 13: again, the motivation for type preservation
is not very clear; the present text

> Type preservation enables us to focus on mappings (<.>) in which a
> session type operator is always translated into itself. In turn,
> this is key to retain the meaning of structured protocols across
> typed encodings.

sounds rather vague.  Why do you _have to_ "retain the meaning of
structured protocols across typed encodings"?

p. 15, Example 1: for me, this example is _harder_ to follow than the
general definition in Fig. 6 and does not help much.

[**] p. 16, "Using operational correspondence, we can show full
abstraction": this is far too insufficient for explaining why full
abstraction holds!  In general, operational correspondence _per se_
does not guarantee full abstraction.  You should explain why the
encoded processes do _not_ allow more observations than the originals.

"We now discuss the encodability of HO into \pi": do you mean "of
HO\pi"?

p. 26, reference 20: "featherweight java" -> "Featherweight Java"
("{F}eatherweight {J}ava" in BibTeX)

[**] p. 17, "We can show full abstraction, type preservation, and
preciseness": same as above

[*] p. 20, "The resulting processes have a mismatch [...]": I do not
quite understand this argument; the name a is fresh and cannot be used
until received via s, just like the abstraction \lambda x.P in
s!<\lambda x.P>, so the comparison does not seem fair.

[*] p. 21, "There is no minimal encoding": Why does the encoding _have
to_ be minimal (barb preserving, in particular)?  Since you are
compiling between _different_ languages, it seems natural that the
barbs are also _translated_, not _the same_.

[*] Fig. 8, "Term mappings for \lambda x:C.P are as in Fig. 6,
replacing (<.>)^1, {{.}}^1, and [[.]]^1_f, by (<.>)^3, {{.}}^3, and
[[.]]^3": I cannot seem to find the definition of {{.}}^1 or "term
mappings for \lambda x:C.P" anywhere in Fig. 6.


----------------------- REVIEW 2 ---------------------
PAPER: 30
TITLE: On the Relative Expressiveness of Higher-Order Session Processes
AUTHORS: Dimitrios Kouzapas, Jorge A. Pérez and Nobuko Yoshida

OVERALL EVALUATION: 1 (accept)
REVIEWER'S CONFIDENCE: 3 (medium)

----------- REVIEW -----------
This paper studies encodings of the higher-order pi calculus into both 
the pi calculus and a higher-order calculus without name-passing.  The 
novelty in the approach taken is to study the preservation of 
session types through the encodings: the encodings are shown to preserve 
the operators of session types.  

In more detail, the paper makes a number of important contributions: it 
introduces session type-respecting equivalences on higher-order pi 
processes; it encodes the higher-order pi calculus into both the 
higher-order calculus without name passing and the pi calculus, showing 
the encodings to be fully abstract and establishing operational 
correspondence results, and showing the encodings to preserve the 
structure of session types.  The paper then compares the efficiency of 
the two encodings, demonstrating that the higher-order calculus can more 
efficiently simulate the higher-order term with name passing than the pi 
calculus.  There are a number of additional results extending the main 
result and a non-encodability result establishing the necessity of 
shared names.

The presentation of the paper is generally very good, though at times it 
feels rather dense (perhaps in part due to the authors using a 
non-standard typeface: with the normal font, I do not believe that it 
would have fit into 25 pages), and further explanation of some concepts 
would be preferable; perhaps this could be achieved by removing some of 
the details of extensions and leaving these to a journal version of the 
paper.  Additionally, the paper claims to be self-contained in the 
introduction, but the description of session types could be clearer. 
There should be a clear description of what is meant by a session name 
and what it meant by a shared name. Similarly, a description of what 
shared and linear higher-order types are at the start of Section 4 would 
make the paper clearer.

Overall, though I found the detail of the paper quite hard to follow 
(some definitions, for example, are only presented in the accompanying 
technical report/appendix, which I didn't study in depth), this is an 
artefact of the subtle nature of the subject area.  I think that the 
results themselves are very interesting and make a very good 
contribution to the field.

A few additional comments follow:

p6: Missing . before "Our"

p8: Def of context: why not (\lambda x.P)C ?

p9 l4: Extra \Delta' in the introduction of notation for transitions in 
the LTS, and similarly for weak transitions

p10: The first sentence seems to contradict Theorem 2: where in Theorem 
2 are processes restricted to those not in \pi?  What does it mean for a 
HO\pi process not to be in \pi?  Is this just HO?

p11: It would be helpful to motivate Lemma 2 by saying where it is going 
to be used

p13: Should the equivalence on HO\pi be higher-order bisimilarity (given 
that it coincides with congruence only for HO\pi processes not in \pi, according to the sentence at the start of the section)


----------------------- REVIEW 3 ---------------------
PAPER: 30
TITLE: On the Relative Expressiveness of Higher-Order Session Processes
AUTHORS: Dimitrios Kouzapas, Jorge A. Pérez and Nobuko Yoshida

OVERALL EVALUATION: 0 (borderline paper)
REVIEWER'S CONFIDENCE: 2 (low)

----------- REVIEW -----------
This paper studies a new higher order process calculus -- HO-Pi,
  a pi-calculus equipped with session types and higher order messages,
  namely *functions from names to processes*. It identifies a sub-calculus
  of the above, HO which omits name passing and recursion, and shows that
  HO-Pi can be translated in a (session-)type preserving manner to HO.

  Pros:

  + The main contribution is the introduction of session type
    preserving translations, and proof techniques for reasoning
    about equivalence via a novel bisimulation relation.

  Cons:

  - This seems to be a very focussed contribution, perhaps more
    suited to CONCUR, than to a broader programming focussed venue
    like ESOP.

  This is a very technical result; experts in session types may
  find it exciting, or it may be more suitable for journal
  publication.

  However I suspect there are few general insights that are of
  interest to outsiders, such as myself, who nevertheless cares
  about distributed systems and concurrency broadly.


----------------------- REVIEW 4 ---------------------
PAPER: 30
TITLE: On the Relative Expressiveness of Higher-Order Session Processes
AUTHORS: Dimitrios Kouzapas, Jorge A. Pérez and Nobuko Yoshida

OVERALL EVALUATION: 1 (accept)
REVIEWER'S CONFIDENCE: 5 (expert)

----------- REVIEW -----------
This paper is about the expressiveness and behavioural theory of constructs for
higher-order concurrency
with session types. A 'small' higher-order calculus is isolted and shown to be
able to faigthfully encode `larger' calculi, as well as pure name-passing
calculi (without higher-order features). In fact, three calculi are shown to be
equally expressive. There is also a non-expressiveness result (shared names vs
linear names).
Two bisimulations are proposed for the higher-order calculi with sessions.
Faithful encoding here implies full abstraction at the level of behaviours, and
type preservation.

The encodings and the bisimulations proposed are refinements or developments of
tricks or encodings in the literature.
Here they are studied in depth. The proofs of the results, involving types and
fully abstraction on behaviours, are non-trivial, and require some sophisticated
manipulations at the level of types and bisimulations. The writing is clear.
The results show that there is a good fit between higher-order concurrency and
sessions.
The encodings and the definitions are not really surprising. Yet, a number of
results are proved and the paper is solid. In summary this paper is not
exceptional, but it would be a decent Esop paper, that should be relevant to
those interested in expressiveness matters for higher-order concurrency.

Minor comments:

- the bisimulations propose remind me of normal bisimulation. The differences
  could be discussed, to help the reader understanding the new definitions.

- type preservation: discuss whether the criteria could be too rigid, and
highlight the usefulness of them for the proofs in the paper.

