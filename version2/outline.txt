OUTLINE
---------------------

1.	Define a HO session calculus.
2.	Identify two subcalculi:
	- Standard session calculus (no HO)
	- pure HO session calculus (no name passing)
3.	Develop an HO session type system.
4.	Develop behavioural theory:
	- Barb-preserving congruence
	- Contextual bisimulation
	- Non-contextual bisimulation
	- Prove that the relations are equal.
5.	Encodings:
	- Pure session calculus (with no recursion) into pure HO
	- Extend pure HO with more constructs that are encodable
	- Pure session calculus recursion into pure HO
	- pure HO into pure session calculus
	- explore the limits of encoding shared names into session names.
	- lambda calculus encoding (if we have time and space)



===================================================================================================

Encoding outline

Calculi:

1. Full HOπ
2. HO		pure abstraction passing
3. sπ		pure name passing
4. psπ		pure polyadic name passing
5. pHO		pure polyadic abstraction/application passing


Encodings

1. [-]1					: sπ with no recursion --> HO
2. [-]2					: psπ --> sπ
3. [-]3 = [-]1.[-]2			: psπ --> HO
4. [-]4					: pHO --> psπ + HO --> HO
   or
   [-]  = ([-]4: pHO --> psπ + ΗΟ).[-]3 : pHO --> HO
5. [-]5 = ([-] : sπ --> pHO).[-]4	: sπ --> HO
6. [-]6.1				: HO --> sπ (map session channels to session channels naive approach)
   [-]6.2				: HO --> sπ (map session channels to shared channels)
7. \not\exists [-]7: sπ with shared channels --> HO with no shared channels

Low priority

8. [-]8					: call by value λ-calculus --> HO		(very interesting)
9. [-]9					: HO with process abstraction/application --> HO


